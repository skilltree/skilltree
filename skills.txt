case study:
	web dev:
		Thourough HTML
		Basic CSS
		Javascript w/ jQuery
		HTTP Communication (POST, GET, etc.)
		Databases
		Web frameworks
			MVC in general
			different languages (choice)
		Servers
		Sockets
		Testing
		Specific JS libraries
		Remote control
		VMs

	sysadmin (*nix):
		coreutils
		filesystem structure
		permissions
		monitoring tools
		benchmarking
		troubleshooting
		standard config files
		conventions (dotfiles, location of configs, loc of executables)
		shell scripting
		compiling and patching
		package management (manual and through a pkg manager)

	Android Development:
		Java
		XML
		MVC
		UI design
		UX design
		Low(ish) level hardware control
			camera
			gyro
			accelerometer
			etc

	iOS Development:
		Get a Mac
		MVC
		XCode
		UI design
		UX design
		Low(ish) level hardware control
			camera
			gyro
			accelerometer
			etc

	Ricing (mostly Linux, some relevant to Windows):
		config files
		DEs
		WMs
		font rendering & font choice
		UI customization
		scripting
		hardware monitoring
		ricing programs

	PC development
		Programming fundamentals
		scripting
		C or another low level language
		High Level languages
		Assembly
		UI Libraries
		Protocols (ftp, http, etc)


	HW dev
		logic gates
		computer organization
		Verilog/VHDL
		cross-device communication
		optoelectronics
		sensors
		actuators
		Power management
		HW optimization
		Soldering

	PC building
		CPUs, RAM & Mobos
		GPUs & Displays
		Architectures
		Cooling
		HDD & SSD management (RAID, IDE, SATA)
		Bottlenecking
		OS choice
		HIDs

	Algo Design
		Data Structures and Their Uses
			Stacks and Queues
			Linked Lists and Arrays
				Hash Tables and Dictionaries
			Graphs and Trees
				Heaps
				Binary Search Trees
		Complexity and Correctness
			Optimizing for Average Time v. Worst-Case
		Sorting Algorithms
			Bubble, Insertion, and Selection
			Quicksort, Merge
			Using Graphs: Heapsort and BSTs
		Graph Algorithms
		Greedy Algorithms
		Divide and Conquer
		Approximation and Heuristic Algorithms
		Dynamic Algorithms

	Programming
		Basic Concepts
			How a Program Executes (line-by-line)
			Decision and Branching (if-else)
			Iteration (loops, recursion)
			Commenting, Readability, and Conventions
		Procedural Programming
			Variables and State
			Procedures
			Scope (Dynamic v. Static)
			The Languages (C, Fortran, BASIC,)
		Logic Programming
			Rules and Queries
			Horn Clauses
			Cut
			Negation as Failure
			The Languages (Prolog,)
		Functional Programming
			Lambda Calculus
			Currying
			Higher-Order Functions
			Pure Functions
			Eager v. Lazy
			The Languages (Racket/Scheme, Haskell,)
		Object-Oriented
			Classes and Objects
			Inheritance and Polymorphism
			Encapsulation
			The Languages (C++, Java, Python,)
		Compilers
			
